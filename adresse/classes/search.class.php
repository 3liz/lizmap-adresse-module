<?php
/**
 * @author    Pierre DRILLIN
 * @copyright 2020 3liz
 *
 * @see      http://3liz.com
 *
 * @license    Mozilla Public Licence
 */
class search
{
    protected $sql = array(
        'idvoie' => 'SELECT id_voie, nom_complet, type_num FROM( SELECT id_voie, type_num, nom_complet, ST_Distance(ST_geomfromtext($1, $2),geom) as dist
          FROM adresse.voie
          WHERE statut_voie_num IS FALSE ORDER BY dist LIMIT 1) AS d;',
        'classique' => 'SELECT * FROM adresse.calcul_num_adr(ST_geomfromtext($1,$2))',
        'metrique' => 'SELECT * FROM adresse.calcul_num_metrique(ST_geomfromtext($1,$2))',
        'bal' => 'SELECT cle_interop, uid_adresse, voie_nom, numero, suffixe, commune_nom, position,x, y, long, lat, source, date_der_maj FROM adresse.v_export_bal  WHERE code_insee = $1',
        'version' => 'SELECT me_version FROM adresse.metadata',
        'voie_delib' => 'SELECT DISTINCT v.nom_complet FROM adresse.voie v, adresse.commune c WHERE c.insee_code = $1::text AND ST_intersects(v.geom, c.geom)',
        'commune' => 'SELECT c.commune_nom as cnom, c.insee_code as cinsee, COUNT(v.id_voie) as nbid FROM adresse.commune c, adresse.voie v WHERE c.insee_code = $1::text AND ST_intersects(c.geom, v.geom) AND v.delib = true group by c.commune_nom, c.insee_code',
        'zip1' => "SELECT d.lien, d.nom_doc FROM adresse.document d, adresse.commune c WHERE d.id_commune = c.id_com AND c.insee_code = $1 AND d.type_document = 'delib' ORDER BY d.date_doc DESC LIMIT 1;",
        'zipAll' => "SELECT d.lien, d.nom_doc FROM adresse.document d, adresse.commune c WHERE d.id_commune = c.id_com AND c.insee_code = $1 AND d.type_document = 'delib' ORDER BY d.date_doc DESC;",
    );

    protected function getSql($option)
    {
        if (isset($this->sql[$option])) {
            return $this->sql[$option];
        }

        return null;
    }

    public function query($sql, $filterParams, $profile = 'adresse')
    {
        $cnx = jDb::getConnection($profile);
        $resultset = $cnx->prepare($sql);

        $resultset->execute($filterParams);

        return $resultset;
    }

    /**
     * Get PDF generated by QGIS Server Cadastre plugin.
     *
     * @param project Project key
     * @param repository Repository key
     * @param geom Geometry as WKT
     * @param srid Cordiante system identifier
     * @param mixed $repository
     * @param mixed $project
     * @param mixed $layer
     * @param mixed $filterParams
     * @param mixed $option
     */
    public function getData($repository, $project, $layer, $filterParams, $option)
    {
        $profile = adresseProfile::get($repository, $project, $layer);
        $this->repository = $repository;
        $this->project = $project;

        // Run query
        $sql = $this->getSql($option);
        if (!$sql) {
            return null;
        }

        return $this->query($sql, $filterParams, $profile);
    }
}
